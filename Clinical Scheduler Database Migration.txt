-- lib/db/migrations/0001_clinical_scheduler.sql

DO $$ BEGIN
 CREATE TYPE "public"."service_type" AS ENUM('weekday', 'weekend', 'holiday', 'call');
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 CREATE TYPE "public"."assignment_status" AS ENUM('scheduled', 'pending', 'completed', 'cancelled');
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 CREATE TYPE "public"."preference_type" AS ENUM('prefer', 'available', 'unavailable', 'emergency_only');
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 CREATE TYPE "public"."swap_status" AS ENUM('pending', 'approved', 'rejected', 'completed');
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

-- Services/Rotations table
CREATE TABLE IF NOT EXISTS "services" (
	"id" serial PRIMARY KEY NOT NULL,
	"team_id" integer NOT NULL,
	"name" varchar(100) NOT NULL,
	"description" text,
	"service_type" "service_type" NOT NULL,
	"color" varchar(7) DEFAULT '#3B82F6',
	"min_staff_required" integer DEFAULT 1,
	"max_staff_allowed" integer DEFAULT 1,
	"start_time" time,
	"end_time" time,
	"is_active" boolean DEFAULT true,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"updated_at" timestamp DEFAULT now() NOT NULL
);

-- Schedule periods (rotations, blocks, etc.)
CREATE TABLE IF NOT EXISTS "schedule_periods" (
	"id" serial PRIMARY KEY NOT NULL,
	"team_id" integer NOT NULL,
	"name" varchar(100) NOT NULL,
	"start_date" date NOT NULL,
	"end_date" date NOT NULL,
	"availability_deadline" date,
	"is_published" boolean DEFAULT false,
	"is_locked" boolean DEFAULT false,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"updated_at" timestamp DEFAULT now() NOT NULL
);

-- User preferences for scheduling
CREATE TABLE IF NOT EXISTS "user_preferences" (
	"id" serial PRIMARY KEY NOT NULL,
	"user_id" integer NOT NULL,
	"team_id" integer NOT NULL,
	"max_consecutive_days" integer DEFAULT 7,
	"max_weekends_per_month" integer DEFAULT 1,
	"prefer_back_to_back_weeks" boolean DEFAULT false,
	"prefer_two_weeks_in_row" boolean DEFAULT false,
	"custom_preferences" jsonb,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"updated_at" timestamp DEFAULT now() NOT NULL,
	CONSTRAINT "user_preferences_user_team_unique" UNIQUE("user_id", "team_id")
);

-- Availability submissions
CREATE TABLE IF NOT EXISTS "availability" (
	"id" serial PRIMARY KEY NOT NULL,
	"user_id" integer NOT NULL,
	"schedule_period_id" integer NOT NULL,
	"service_id" integer NOT NULL,
	"date" date NOT NULL,
	"preference_type" "preference_type" NOT NULL,
	"priority" integer DEFAULT 3,
	"notes" text,
	"submitted_at" timestamp DEFAULT now() NOT NULL,
	CONSTRAINT "availability_unique" UNIQUE("user_id", "schedule_period_id", "service_id", "date")
);

-- Actual assignments
CREATE TABLE IF NOT EXISTS "assignments" (
	"id" serial PRIMARY KEY NOT NULL,
	"user_id" integer NOT NULL,
	"service_id" integer NOT NULL,
	"schedule_period_id" integer NOT NULL,
	"date" date NOT NULL,
	"status" "assignment_status" DEFAULT 'scheduled',
	"is_call_day" boolean DEFAULT false,
	"assigned_by" integer,
	"assigned_at" timestamp DEFAULT now() NOT NULL,
	"notes" text,
	CONSTRAINT "assignments_unique" UNIQUE("user_id", "service_id", "date")
);

-- Swap requests
CREATE TABLE IF NOT EXISTS "swap_requests" (
	"id" serial PRIMARY KEY NOT NULL,
	"requester_id" integer NOT NULL,
	"requester_assignment_id" integer NOT NULL,
	"target_user_id" integer,
	"target_assignment_id" integer,
	"swap_details" jsonb,
	"status" "swap_status" DEFAULT 'pending',
	"reason" text,
	"admin_notes" text,
	"requested_at" timestamp DEFAULT now() NOT NULL,
	"responded_at" timestamp,
	"responded_by" integer
);

-- Scheduling constraints and rules
CREATE TABLE IF NOT EXISTS "scheduling_rules" (
	"id" serial PRIMARY KEY NOT NULL,
	"team_id" integer NOT NULL,
	"name" varchar(100) NOT NULL,
	"rule_type" varchar(50) NOT NULL,
	"rule_config" jsonb,
	"is_active" boolean DEFAULT true,
	"created_at" timestamp DEFAULT now() NOT NULL
);

-- Foreign key constraints
DO $$ BEGIN
 ALTER TABLE "services" ADD CONSTRAINT "services_team_id_teams_id_fk" FOREIGN KEY ("team_id") REFERENCES "public"."teams"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 ALTER TABLE "schedule_periods" ADD CONSTRAINT "schedule_periods_team_id_teams_id_fk" FOREIGN KEY ("team_id") REFERENCES "public"."teams"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 ALTER TABLE "user_preferences" ADD CONSTRAINT "user_preferences_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 ALTER TABLE "user_preferences" ADD CONSTRAINT "user_preferences_team_id_teams_id_fk" FOREIGN KEY ("team_id") REFERENCES "public"."teams"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 ALTER TABLE "availability" ADD CONSTRAINT "availability_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 ALTER TABLE "availability" ADD CONSTRAINT "availability_schedule_period_id_schedule_periods_id_fk" FOREIGN KEY ("schedule_period_id") REFERENCES "public"."schedule_periods"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 ALTER TABLE "availability" ADD CONSTRAINT "availability_service_id_services_id_fk" FOREIGN KEY ("service_id") REFERENCES "public"."services"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 ALTER TABLE "assignments" ADD CONSTRAINT "assignments_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 ALTER TABLE "assignments" ADD CONSTRAINT "assignments_service_id_services_id_fk" FOREIGN KEY ("service_id") REFERENCES "public"."services"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 ALTER TABLE "assignments" ADD CONSTRAINT "assignments_schedule_period_id_schedule_periods_id_fk" FOREIGN KEY ("schedule_period_id") REFERENCES "public"."schedule_periods"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 ALTER TABLE "assignments" ADD CONSTRAINT "assignments_assigned_by_users_id_fk" FOREIGN KEY ("assigned_by") REFERENCES "public"."users"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 ALTER TABLE "swap_requests" ADD CONSTRAINT "swap_requests_requester_id_users_id_fk" FOREIGN KEY ("requester_id") REFERENCES "public"."users"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 ALTER TABLE "swap_requests" ADD CONSTRAINT "swap_requests_requester_assignment_id_assignments_id_fk" FOREIGN KEY ("requester_assignment_id") REFERENCES "public"."assignments"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 ALTER TABLE "swap_requests" ADD CONSTRAINT "swap_requests_target_user_id_users_id_fk" FOREIGN KEY ("target_user_id") REFERENCES "public"."users"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 ALTER TABLE "swap_requests" ADD CONSTRAINT "swap_requests_target_assignment_id_assignments_id_fk" FOREIGN KEY ("target_assignment_id") REFERENCES "public"."assignments"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 ALTER TABLE "swap_requests" ADD CONSTRAINT "swap_requests_responded_by_users_id_fk" FOREIGN KEY ("responded_by") REFERENCES "public"."users"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
 ALTER TABLE "scheduling_rules" ADD CONSTRAINT "scheduling_rules_team_id_teams_id_fk" FOREIGN KEY ("team_id") REFERENCES "public"."teams"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

-- Indexes for performance
CREATE INDEX IF NOT EXISTS "idx_services_team_id" ON "services" ("team_id");
CREATE INDEX IF NOT EXISTS "idx_schedule_periods_team_id" ON "schedule_periods" ("team_id");
CREATE INDEX IF NOT EXISTS "idx_user_preferences_user_id" ON "user_preferences" ("user_id");
CREATE INDEX IF NOT EXISTS "idx_user_preferences_team_id" ON "user_preferences" ("team_id");
CREATE INDEX IF NOT EXISTS "idx_availability_user_id" ON "availability" ("user_id");
CREATE INDEX IF NOT EXISTS "idx_availability_schedule_period_id" ON "availability" ("schedule_period_id");
CREATE INDEX IF NOT EXISTS "idx_availability_date" ON "availability" ("date");
CREATE INDEX IF NOT EXISTS "idx_assignments_user_id" ON "assignments" ("user_id");
CREATE INDEX IF NOT EXISTS "idx_assignments_service_id" ON "assignments" ("service_id");
CREATE INDEX IF NOT EXISTS "idx_assignments_schedule_period_id" ON "assignments" ("schedule_period_id");
CREATE INDEX IF NOT EXISTS "idx_assignments_date" ON "assignments" ("date");
CREATE INDEX IF NOT EXISTS "idx_swap_requests_requester_id" ON "swap_requests" ("requester_id");
CREATE INDEX IF NOT EXISTS "idx_swap_requests_status" ON "swap_requests" ("status");
CREATE INDEX IF NOT EXISTS "idx_scheduling_rules_team_id" ON "scheduling_rules" ("team_id");